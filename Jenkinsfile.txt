pipeline {
    agent any
    environment {
        GITHUB_PAT = credentials('Github_Token')
        GITHUB_URL = 'https://github.com/my-git-subhajit/Sparrow-LMS-Landing.git'
        GIT_BRANCH = 'main'
        
        // SONAR_HOME = tool "sonar-scanner"
        
        DOCKER_HUB_KEY = credentials('docker-hub')
        DOCKER_IMAGE = 'surendergupta/sparrow_landing_ui'
        DOCKER_TAG = "${env.BUILD_ID}"
    }
    
    stages {
        stage('GIT CLONE') {
            steps {
                script {
                    try {
                        checkout([$class: 'GitSCM', branches: [[name: env.GIT_BRANCH]], userRemoteConfigs: [[url:  env.GITHUB_URL, credentialsId: 'github']]])
                    } catch (err) {
                        echo "Error during Git clone: ${err.message}"
                        currentBuild.result = 'FAILURE'
                        error "Stopping pipeline due to Git clone error."
                    }
                }
            }
        }
        // stage("SonarQube Quality Analysis"){
        //     steps{
        //         withSonarQubeEnv("sonar-server"){
        //             sh "$SONAR_HOME/bin/sonar-scanner -Dsonar.projectName=sparrowcodinglabslandingui -Dsonar.projectKey=sparrowcodinglabslandingui"
        //         }
        //     }
        // }
        stage('OWASP Dependency Check') {
            steps {
                script {
                    try {
                        dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'Dependency-Check'
                        dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                    } catch (err) {
                        echo "Error in OWASP FS SCAN: ${err.message}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        // stage("Sonar Quality Gate Scan"){
        //     steps{
        //         timeout(time: 2, unit: "MINUTES"){
        //             waitForQualityGate abortPipeline: false
        //         }
        //     }
        // }
        stage("Trivy File System Scan"){
            steps{
                sh "trivy fs --format  table -o trivy-fs-report.html ."
            }
        }
        stage("Docker Build Image"){
            steps{
                script {
                    sh "docker login -u ${DOCKER_HUB_KEY_USR} -p ${DOCKER_HUB_KEY_PSW}"
                    sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                }
            }
        }
        stage("TRIVY Docker Image Scan"){
            steps{
                sh "trivy image ${DOCKER_IMAGE}:${DOCKER_TAG} > trivyimage.txt"
            }
        }
        stage('Tag and Push Docker Image') {
            steps {
                script {
                    sh "docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    sh "docker push ${DOCKER_IMAGE}:${DOCKER_TAG}"
                }
            }
        }
    }
    post {
        always {
            script {
                echo "Cleaning up workspace"
                cleanWs()
            }
        }
        failure {
            script {
                echo "Pipeline failed. Sending notifications..."
                // Add notification logic here (e.g., email, Slack)
            }
        }
        success {
            script {
                echo "Pipeline completed successfully!"
                // Add success notification logic here
            }
        }
    }
}